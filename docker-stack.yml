version: '3.8'

services:
  frontend:
    image: ${REGISTRY:-ghcr.io}/${GITHUB_USERNAME:-pjcdz}/study_frontend:${TAG:-latest}
    ports:
      - "3000"
    environment:
      - CHOKIDAR_USEPOLLING=true
      - NODE_ENV=production
      - NEXT_PUBLIC_API_URL=https://study.cardozo.com.ar/api
    depends_on:
      - backend
    networks:
      - study-network
      - traefik_traefik-public
    deploy:
      replicas: 1  # Start with 1 replica for easier troubleshooting
      update_config:
        parallelism: 1
        delay: 10s
        order: start-first
      restart_policy:
        condition: on-failure
        max_attempts: 3
      labels:
        - "traefik.enable=true"
        - "traefik.http.routers.study-frontend.rule=Host(`study.cardozo.com.ar`)"  
        - "traefik.http.routers.study-frontend.entrypoints=websecure"
        - "traefik.http.routers.study-frontend.tls=true"
        - "traefik.http.routers.study-frontend.tls.certresolver=myresolver"
        - "traefik.http.services.study-frontend.loadbalancer.server.port=3000"
        - "traefik.docker.network=traefik_traefik-public"
        - "traefik.http.routers.study-frontend.priority=100"
    healthcheck:
      test: ["CMD", "wget", "-qO-", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  backend:
    image: ${REGISTRY:-ghcr.io}/${GITHUB_USERNAME:-pjcdz}/study_backend:${TAG:-latest}
    ports:
      - "4000"
    environment:
      - NODE_ENV=production
    networks:
      - study-network
      - traefik_traefik-public
    volumes:
      - backend-uploads:/app/uploads
    deploy:
      replicas: 1  # Start with 1 replica for easier troubleshooting
      update_config:
        parallelism: 1
        delay: 10s
        order: start-first
      restart_policy:
        condition: on-failure
        max_attempts: 3
      labels:
        - "traefik.enable=true"
        - "traefik.http.routers.study-backend.rule=Host(`study.cardozo.com.ar`) && PathPrefix(`/api`)"
        - "traefik.http.routers.study-backend.entrypoints=websecure"
        - "traefik.http.routers.study-backend.tls=true"
        - "traefik.http.routers.study-backend.tls.certresolver=myresolver"
        - "traefik.http.services.study-backend.loadbalancer.server.port=4000"
        - "traefik.docker.network=traefik_traefik-public"
        - "traefik.http.middlewares.study-backend-stripprefix.stripprefix.prefixes=/api"
        - "traefik.http.routers.study-backend.middlewares=study-backend-stripprefix"
        - "traefik.http.routers.study-backend.priority=90"
    healthcheck:
      test: ["CMD", "wget", "-qO-", "http://localhost:4000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

networks:
  study-network:
    driver: overlay
  traefik_traefik-public:
    external: true

# Definir explícitamente los volúmenes nombrados para asegurar persistencia en Swarm
volumes:
  backend-uploads:
    driver: local  # Especificar el driver de volumen explícitamente